package binarySearch;

import org.junit.jupiter.api.Test;

import java.util.Arrays;

public class TripleInversion {

    private static int count;

    public int solve(int[] nums) {
        count = 0;
        sort(nums, 0, nums.length - 1);
        return count;
    }

    private void sort(int[] nums, int start, int end) {
        if (start >= end) {
            return;
        }
        int mid = start + (end - start) / 2;
        sort(nums, start, mid);
        sort(nums, mid + 1, end);
        merge(nums, start, mid, end);
    }

    private void merge(int[] nums, int start, int mid, int end) {
        int[] temp = new int[nums.length];
        int l = start, r = mid + 1, cur = start;
        while (l <= mid && r <= end) {
            if (nums[l] <= nums[r]) {
                temp[cur++] = nums[l++];
            } else {
                temp[cur++] = nums[r++];
            }
        }
        while (l <= mid) {
            temp[cur++] = nums[l++];
        }
        while (r <= end) {
            temp[cur++] = nums[r++];
        }
        l = start; r = mid + 1;
        while (l <= mid && r <= end) {
            if (nums[l] <= nums[r] * 3) {
                l++;
            } else {
                count += mid - l + 1;
                r++;
            }
        }
        for (int i = start; i <= end; i++) {
            nums[i] = temp[i];
        }
    }

    @Test
    public void test() {
        int[] nums = {60,160,247,92,97,140,151,203,165,205,28,236,165,75,24,224,59,110,8,246,96,229,46,233,225,131,14,157,9,249,228,203,54,51,236,88,17,246,142,222,171,214,151,4,26,185,70,70,175,141,179,22,128,199,62,245,195,146,85,100,210,65,129,213,78,50,13,174,197,74,229,217,109,250,214,177,214,251,190,49,227,32,161,219,123,162,44,160,52,70,189,97,69,230,185,14,86,227,246,169,91,250,135,49,238,86,190,253,15,6,32,143,127,75,135,42,90,243,244,226,201,22,150,127,148,210,96,65,246,192,73,74,65,222,221,171,21,218,256,126,25,241,173,137,60,112,61,34,63,219,234,71,89,198,115,251,47,28,166,61,142,18,135,248,2,186,76,137,164,185,169,96,2,33,18,150,70,134,29,201,141,28,12,204,46,111,158,213,232,28,11,190,244,197,57,154,185,126,169,27,47,202,51,210,249,149,249,29,235,25,43,145,165,110,94,45,142,218,162,60,182,223,236,27,74,99,29,162,203,143,120,27,175,255,8,110,244,101,145,241,75,228,245,231,238,37,116,14,3,4,42,190,97,69,98,241,225,117,165,94,126,242,161,57,11,179,100,3,102,22,235,247,226,44,36,90,58,89,216,250,191,93,99,79,39,201,53,114,243,171,38,233,34,126,39,56,140,185,140,105,110,80,243,242,213,139,172,186,244,66,122,103,118,29,85,158,175,197,201,201,97,129,234,36,165,110,253,99,6,175,158,239,242,111,120,96,228,185,158,133,219,171,90,144,196,229,101,165,237,239,7,36,93,219,64,153,180,95,215,138,66,21,161,179,56,224,18,97,183,84,86,14,177,209,0,148,199,132,33,248,230,54,158,47,241,185,230,173,236,89,216,235,140,102,97,200,38,211,73,1,14,221,77,1,213,191,46,143,4,168,242,203,75,238,104,70,196,81,198,238,228,201,122,97,151,190,199,18,80,151,234,61,78,152,236,149,166,25,64,185,125,61,137,206,69,48,39,194,177,158,44,35,174,174,79,63,81,140,57,68,41,81,65,209,227,118,189,210,199,197,78,208,112,213,35,163,70,252,107,161,64,237,150,151,177,112,42,253,227,97,228,48,124,62,169,237,175,100,90,164,244,53,155,77,129,94,92,163,155,146,225,88,230,202,14,227,78,238,252,221,240,87,5,133,62,71,109,136,200,13,187,134,100,119,163,206,231,71,188,103,228,33,29,252,161,253,213,174,146,17,200,234,158,30,213,235,222,58,29,163,198,219,204,152,159,32,68,227,107,182,146,27,175,215,90,86,100,161,57,241,249,195,243,142,73,12,169,75,175,84,101,54,144,45,196,62,230,114,31,123,233,105,131,242,28,74,187,106,148,33,24,32,64,157,54,183,40,150,167,7,152,100,215,220,218,231,192,16,242,52,238,166,87,111,129,197,68,34,78,143,37,77,35,155,203,203,128,25,55,59,160,39,31,171,115,220,240,76,190,202,129,178,117,184,73,249,89,71,243,178,196,174,80,224,246,67,114,208,243,81,117,220,5,5,112,117,119,45,117,206,76,168,200,88,18};
        System.out.println(solve(nums));
    }

}
